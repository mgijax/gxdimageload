#!/usr/local/bin/python

#
# Program: tr9417fullsize.py
#
# Original Author: Lori Corbani
#
# Purpose:
#
#	To create input files for the gxdimageload.py program.
#	from full-size of TR9471.
#
# Input:
#
#       assayload.txt, a tab-delimited file in the format:
#               field 1: Probe ID
#               field 2: MGI symbol
#               field 3: Marker ID
#               field 4: Specimen Label
#               field 5: Genotype ID
#               field 6: Tissue Strength
#               field 7: Figure Label   (see gxdimageload/tr9417fullsize.py/tr9417thumbnail.py)
#               field 8: Image File Name        (see gxdimageload/tr9417fullsize.py/tr9417thumbnail.py)
#               field 9: Image link     (see gxdimageload/tr9417fullsize.py/tr9417thumbnail.py)
#
#	PIX_FULLSIZE, tab-delimited list of full size
#		field 1: file name
#		field 2: pix id
#
# Outputs:
#
#       2 tab-delimited files:
#
#	image.txt
#	imagepane.txt
#	
#       1 error file:
#
#	image.error
#

import sys
import os
import string
import db
import mgi_utils
import jpeginfo

#
#  CONSTANTS
#
FIRST_IMAGE_FILE_INDEX = 9

CAPTION = '''This is an image from a set of serial sections generated by the GenePaint database to examine expression of a gene. Information provided by the authors, and thus the GXD annotations, refer to the entire set of GenePaint images.  Therefore, this section may not include the anatomical structures annotated in the GXD record. Additional images for this gene and 'virtual microscope' zoom capability for the images can be accessed via the GenePaint link at the bottom of this page.'''

COPYRIGHT = '''Questions regarding this image or its use in publications should be directed to G. Eichele at E-mail: Gregor.Eichele@mpibpc.mpg.de'''

FULLSIZE_IMAGE_KEY = ''

#
#  GLOBALS
#
pixelDBDir = os.environ['PIXELDBDATA']
pixFile = os.environ['PIX_FULLSIZE']
imageListFile = os.environ['IMAGE_LIST_FIG_FILE']
imageFile = os.environ['IMAGE_FULLSIZE']
imagePaneFile = os.environ['IMAGEPANE_FULLSIZE']
jNumber = os.environ['REFERENCE']

#
# Purpose: Create a dictionary for looking up the pix ID for an image file
#          name. The information for the dictionary is read from a file
#          that contains list of images that are being added to pixel DB.
# Returns: Nothing
# Assumes: Nothing
# Effects: Sets global variable
# Throws: Nothing
#
def buildPixIDLookup ():
    global pixIDLookup

    #
    # Open the input file.
    #
    try:
        fpPixFile = open(pixFile, 'r')
    except:
        sys.stderr.write('Cannot open input file: ' + pixFile + '\n')
        sys.exit(1)

    #
    # Build a dictionary of pix IDs for each image file name, keyed by
    # image file name.
    #
    pixIDLookup = {}
    for line in fpPixFile.readlines():
        tokens = string.split(line[:-1], '\t')
        pixIDLookup[tokens[0]] = tokens[1]
    fpPixFile.close()

    return

#
# Purpose: Open the files.
# Returns: Nothing
# Assumes: The names of the files are set in the environment.
# Effects: Sets global variables
# Throws: Nothing
#
def openFiles ():
    global fpImageList, fpImageFile, fpImagePaneFile

    #
    # Open the input file.
    #
    try:
        fpImageList = open(imageListFile, 'r')
    except:
        sys.stderr.write('Cannot open input file: ' + imageListFile + '\n')
        sys.exit(1)

    #
    # Open the output files.
    #
    try:
        fpImageFile = open(imageFile, 'w')
    except:
        sys.stderr.write('Cannot open output file: ' + imageFile + '\n')
        sys.exit(1)

    try:
        fpImagePaneFile = open(imagePaneFile, 'w')
    except:
        sys.stderr.write('Cannot open output file: ' + imagePaneFile + '\n')
        sys.exit(1)

    return


#
# Purpose: Close the files.
# Returns: Nothing
# Assumes: Nothing
# Effects: Nothing
# Throws: Nothing
#
def closeFiles ():
    fpImageList.close()
    fpImageFile.close()
    fpImagePaneFile.close()

    return


#
# Purpose: Create the image and image pane output files for each pixel DB
#          image that is being added.
# Returns: 0 if successful, 1 for an error
# Assumes: Nothing
# Effects: Nothing
# Throws: Nothing
#
def process ():

    #
    # Search through each line of the image list file.
    #
    lineNum = 0
    for line in fpImageList.readlines():

	lineNum = lineNum + 1

	if lineNum == 1:
	    continue

        tokens = string.split(line[:-1], '\t')
        figureLabel = tokens[6]
        filename =  tokens[7]

	if not pixIDLookup.has_key(filename):
        	print 'Cannot find filename: ' + filename + '\n'
		continue
		
        pixID = pixIDLookup[filename]

        #
        # Get the X an Y dimensions of the image file.
        #
        (xdim, ydim) = jpeginfo.getDimensions(pixelDBDir + '/' + pixID + '.jpg')

        fpImageFile.write(jNumber + '\t' +
                          FULLSIZE_IMAGE_KEY + '\t' +
                          pixID + '\t' +
                          str(xdim) + '\t' +
                          str(ydim) + '\t' +
                          figureLabel + '\t' +
                          COPYRIGHT + '\t' +
                          CAPTION + '\n')

        fpImagePaneFile.write(pixID + '\t' + '\n')

    return 0

#
# Main
#
buildPixIDLookup()
openFiles()
process()
closeFiles()

sys.exit(0)
